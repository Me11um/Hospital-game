<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10001</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.fight = 0
global.fightx = 0
global.fighty = 0
global.fightoffset = 100
global.opponent = 0
global.fightstart = 10
global.fightturn = 0
global.turnchangecooldown = 0

global.darksurface = -1

heroportraitindex = 0

global.dialogue = 0
global.dialoguesound = -1
global.currentdialogue = 0
global.currentdialogueline = 0
global.dialoguex = 0
global.dialoguey = 0
scrSetDialogues()
drawdialogUE = 0
drawdialogUErect = 0
drawdialog = 0
drawdialogrect = 0
drawdialogletter = 0
drawdialogletterdelay = 1

currentanswer = 0
selectedanswer = -1
drawanswer[0] = 0
drawanswer[1] = 0
drawanswer[2] = 0

answerrecty = view_yview[0] + view_hview[0] - 40
answerrectneedy = view_yview[0] + view_hview[0] - 40

//answerrectw = 0
//answerrectneedw = 0

camconstx = 480
camconsty = 270


i = 0
repeat(10)
{
fightturnx[i] = 0 + (200 / 10) * i
//fightturnalpha[i] = fightturnx[i]/200
i += 1
}


drawfightUE = 0
drawUErect = 0
drawUErect2 = 0
drawfighticons = 0
drawfightnamedir = 0
drawfightrectdir = 0
drawfightUErect = 0
currentanswerfight = 2
fightreload = 30

global.shake = 0

buttonscount = 3
global.buttons = -1
buttonssuccess = -1

mousefightdraw = 0
attackstrength = 0
attacktimeout = 90

mouseiconindex = 0
mouseicondir = 15

mousechargex = 0
mousechargey = 0
mouseshake = 0


if room = rmFirstDoctor alarm[4] = 180

fade = 1

global.task = ""
taskcompleted = 0
taskstep = 0
nexttask = ""
taskplusx = 0

firstfloorsequence = 0
ffsx = 0
ffsalpha = 0

global.death = 0
global.deathscreen = 0
global.deathsentence = ""

next = 0
nextalpha = 0
nextlevel = -1

linealpha = 0
linedir = 0
linefade = 0

fade2 = 0
fade2alpha = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>taskstep = 1
nexttask = "Взять талон в регистратуре"

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.fightturn = 11 {
    global.death = 1
    if room = rmFirstLevel global.deathsentence = "Проиграть на первом же уровне, да ещё и уборщице...#Какой позор..."
    audio_play_sound(sndGameOver,0,0)
}
if global.fightturn = 12 {
    audio_stop_sound(music)
    global.fight = 0
    drawfightUE = 0
    my_id = instance_create(objPlayerFight.x, objPlayerFight.y, objPlayer)
    with objPlayerFight instance_destroy()
    with objEnemyFight { instance_create(x,y,objDeadBody) instance_destroy() }
    
    if room = rmFirstLevel { with objMetalDoorSideClosed {if x &gt; 300 {my_id = instance_create(x,y,objMetalDoorSide) instance_destroy()}}}
}

if global.fightturn = 13 {
    audio_stop_sound(music)
    global.fight = 0
    drawfightUE = 0
    my_id = instance_create(objPlayerFight.x, objPlayerFight.y, objPlayer)
    with objPlayerFight instance_destroy()
    if room = rmFirstLevel {
    my_id = instance_create(objEnemyFight.x, objEnemyFight.y, objJanitor)
    my_id.sprite_index = sprJanitorIdle
    my_id.image_xscale *= -1
    my_id.step = -1
    scrStartDialogue(2,7)
    }
    with objEnemyFight { instance_destroy() }
    if room = rmFirstLevel { with objMetalDoorSideClosed {if x &gt; 300 {my_id = instance_create(x,y,objMetalDoorSide) instance_destroy()}}}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if room = rmFirstDoctor {
    scrStartDialogue(1, 0)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//global.currentdialogueline = global.dialogueanswertransit[global.currentdialogue, currentanswer]

global.currentdialogueline = global.dialogueanswertransit[global.dialoganswersid[global.currentdialogue, global.currentdialogueline], currentanswer]
global.dialoguesound = global.dialoguesoundeffect[global.currentdialogue, global.currentdialogueline]
drawdialogrect = 0
drawdialogletter = 0
if global.dialoguetarget[global.currentdialogue, global.currentdialogueline] != -1 {
    global.dialoguex = global.dialoguetarget[global.currentdialogue, global.currentdialogueline].x
    global.dialoguey = global.dialoguetarget[global.currentdialogue, global.currentdialogueline].y
    }
currentanswer = 0
selectedanswer = -1
drawanswer[0] = 0
drawanswer[1] = 0
drawanswer[2] = 0

answerrecty = view_yview[0] + view_hview[0] - 40
answerrectneedy = view_yview[0] + view_hview[0] - 40
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>drawdialog = 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>drawdialogUE = 1
alarm[2] = 30
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>drawfightUE = 1
global.fightturn = 1
if room = rmFirstLevel music = audio_play_sound(musRudeBuster,0,1) else
music = audio_play_sound(musKingBoss,0,1)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if room = rmThirdFloor {
    if surface_exists(global.darksurface) {
    surface_set_target(global.darksurface)
    draw_clear_alpha(merge_color(c_white, c_black, 0.4), 1)
    surface_reset_target()
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.fight = 0 and global.dialogue = 0 and firstfloorsequence = 0 {
if instance_exists(objPlayer) {

view_wview[0] += (480 - view_wview[0]) * 0.1
view_hview[0] = camconsty * (view_wview[0] / camconstx)

view_speed = point_distance(view_xview[0],view_yview[0],objPlayer.x - view_wview[0] / 2, objPlayer.y - view_hview[0] / 2) * 0.1
view_dir = point_direction(view_xview[0],view_yview[0],objPlayer.x - view_wview[0] / 2, objPlayer.y - view_hview[0] / 2)

view_xview[0] += lengthdir_x(view_speed,view_dir)
view_yview[0] += lengthdir_y(view_speed,view_dir)

if view_xview[0] &lt; 0 view_xview[0] = 0
if view_yview[0] &lt; 0 view_yview[0] = 0
if view_xview[0] &gt; room_width - view_wview[0] view_xview[0] = room_width - view_wview[0]
if view_yview[0] &gt; room_height - view_hview[0] view_yview[0] = room_height - view_hview[0]
} else {
 if instance_exists(objPlayerWalkCutscenes)
 {
    view_wview[0] += (480 - view_wview[0]) * 0.1
    view_hview[0] = camconsty * (view_wview[0] / camconstx)

    view_speed = point_distance(view_xview[0],view_yview[0],objPlayerWalkCutscenes.x - view_wview[0] / 2, objPlayerWalkCutscenes.y - view_hview[0] / 2) * 0.1
    view_dir = point_direction(view_xview[0],view_yview[0],objPlayerWalkCutscenes.x - view_wview[0] / 2, objPlayerWalkCutscenes.y - view_hview[0] / 2)

    view_xview[0] += lengthdir_x(view_speed,view_dir)
    view_yview[0] += lengthdir_y(view_speed,view_dir)

    if view_xview[0] &lt; 0 view_xview[0] = 0
    if view_yview[0] &lt; 0 view_yview[0] = 0
    if view_xview[0] &gt; room_width - view_wview[0] view_xview[0] = room_width - view_wview[0]
    if view_yview[0] &gt; room_height - view_hview[0] view_yview[0] = room_height - view_hview[0]
 }
}
}

if firstfloorsequence != 0 {

view_wview[0] += (480 - view_wview[0]) * 0.1
view_hview[0] = camconsty * (view_wview[0] / camconstx)

view_speed = point_distance(view_xview[0],view_yview[0],240 - view_wview[0] / 2 + ffsx, 200 - view_hview[0] / 2) * 0.1
view_dir = point_direction(view_xview[0],view_yview[0],240 - view_wview[0] / 2 + ffsx, 200 - view_hview[0] / 2)

view_xview[0] += lengthdir_x(view_speed,view_dir)
view_yview[0] += lengthdir_y(view_speed,view_dir)

if view_xview[0] &lt; 0 view_xview[0] = 0
if view_yview[0] &lt; 0 view_yview[0] = 0
if view_xview[0] &gt; room_width - view_wview[0] view_xview[0] = room_width - view_wview[0]
if view_yview[0] &gt; room_height - view_hview[0] view_yview[0] = room_height - view_hview[0]

}

if global.fight != 0 {

view_wview[0] -= (view_wview[0] - (480 * 0.75)) * 0.1
view_hview[0] = camconsty * (view_wview[0] / camconstx)
if global.fightturn = 1 or global.fightturn = 2 or global.fightturn = 3 {
view_speed = point_distance(view_xview[0],view_yview[0],global.fightx - view_wview[0] / 2 - 25, global.fighty - 10 - view_hview[0] / 2) * 0.1
view_dir = point_direction(view_xview[0],view_yview[0],global.fightx - view_wview[0] / 2 - 25, global.fighty - 10 -view_hview[0] / 2)
} else {
view_speed = point_distance(view_xview[0],view_yview[0],global.fightx - view_wview[0] / 2, global.fighty - 10 - view_hview[0] / 2) * 0.1
view_dir = point_direction(view_xview[0],view_yview[0],global.fightx - view_wview[0] / 2, global.fighty - 10 -view_hview[0] / 2)
}
//view_speed = point_distance(view_xview[0],view_yview[0],global.fightx - view_wview[0] / 2 - 50, global.fighty - 20 - view_hview[0] / 2) * 0.1
//view_dir = point_direction(view_xview[0],view_yview[0],global.fightx - view_wview[0] / 2 - 50, global.fighty - 20 -view_hview[0] / 2)

view_xview[0] += lengthdir_x(view_speed,view_dir)
view_yview[0] += lengthdir_y(view_speed,view_dir)

//if view_xview[0] &lt; 0 view_xview[0] = 0
//if view_yview[0] &lt; 0 view_yview[0] = 0
//if view_xview[0] &gt; room_width - view_wview[0] view_xview[0] = room_width - view_wview[0]
//if view_yview[0] &gt; room_height - view_hview[0] view_yview[0] = room_height - view_hview[0]
}

if global.dialogue != 0 {

view_wview[0] -= (view_wview[0] - (480 * 0.75)) * 0.1
view_hview[0] = camconsty * (view_wview[0] / camconstx)

view_speed = point_distance(view_xview[0],view_yview[0],global.dialoguex - view_wview[0] / 2, global.dialoguey - 10 - view_hview[0] / 2) * 0.1
view_dir = point_direction(view_xview[0],view_yview[0],global.dialoguex - view_wview[0] / 2, global.dialoguey - 10 -view_hview[0] / 2)

view_xview[0] += lengthdir_x(view_speed,view_dir)
view_yview[0] += lengthdir_y(view_speed,view_dir)

//if view_xview[0] &lt; 0 view_xview[0] = 0
//if view_yview[0] &lt; 0 view_yview[0] = 0
//if view_xview[0] &gt; room_width - view_wview[0] view_xview[0] = room_width - view_wview[0]
//if view_yview[0] &gt; room_height - view_hview[0] view_yview[0] = room_height - view_hview[0]
}

if global.shake &gt; 0 {
    /*
    view_xview[0] += random_range(-global.shake, global.shake)
    view_yview[0] += random_range(-global.shake, global.shake)
    global.shake *= 0.33
    */
    view_xview[0] += random_range(-global.shake*0.33, global.shake*0.33)
    view_yview[0] += random_range(-global.shake*0.33, global.shake*0.33)
    global.shake -= 0.5
}

if mouseshake &gt; 0 {
    mousechargex += random_range(-mouseshake*0.33, mouseshake*0.33)
    mousechargey += random_range(-mouseshake*0.33, mouseshake*0.33)
    mouseshake -= 0.5
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.dialogue = 1 {
    if global.dialogueanswercount[global.currentdialogue, global.currentdialogueline] = 0 {
    if drawdialogletter &lt; string_length(global.dialogueline[global.currentdialogue, global.currentdialogueline]) { drawdialogletter = string_length(global.dialogueline[global.currentdialogue, global.currentdialogueline]) } else {
        if global.dialoguelinetransit[global.currentdialogue, global.currentdialogueline] = -1 {
            global.dialogue = 0
            drawdialog = 0
            drawdialogUE = 0
            if global.currentdialogue = 0 and global.currentdialogueline = 4 {
                    scrStartFight(432, 227, objFightMannequin)
            }
            if global.currentdialogue = 2 and global.currentdialogueline = 3 {
                    my_id = instance_create(objPlayer.x,objPlayer.y,objPlayerWalkCutscenes)
                    my_id.pathpoint = 1 
                    with objPlayer instance_destroy()
                    global.task = "Надеть бахилы"
                    taskplusx = 500
            }
            if global.currentdialogue = 2 and global.currentdialogueline = 5 {
                    my_id = instance_create(objPlayer.x,objPlayer.y,objPlayerWalkCutscenes)
                    my_id.pathpoint = 1 
                    with objPlayer instance_destroy()
            }
            if global.currentdialogue = 2 and global.currentdialogueline = 6 {
                    scrStartFight(336, 192, objJanitor)
            }
            if global.currentdialogue = 3 and global.currentdialogueline = 3 {
                    nexttask = "Дождаться своей очереди"
                    taskstep = 1
            }
            if global.currentdialogue = 3 and global.currentdialogueline = 10 {
                    nexttask = "Занять очередь в 103-й кабинет"
                    taskstep = 1
            }
            if global.currentdialogue = 1 and global.currentdialogueline = 11 {
                global.death = 1
                global.deathsentence = "Офтальмолог поставил мне диагноз - Дальтонизм"
                audio_stop_all()
                audio_play_sound(sndGameOver,0,0)
            }
            if global.currentdialogue = 1 and global.currentdialogueline = 17 {
                fade2 = 1
            }
        } else {
            global.currentdialogueline = global.dialoguelinetransit[global.currentdialogue, global.currentdialogueline]
            global.dialoguesound = global.dialoguesoundeffect[global.currentdialogue, global.currentdialogueline]
            drawdialogrect = 0
            drawdialogletter = 0
            if global.dialoguetarget[global.currentdialogue, global.currentdialogueline] != -1 {
                global.dialoguex = global.dialoguetarget[global.currentdialogue, global.currentdialogueline].x
                global.dialoguey = global.dialoguetarget[global.currentdialogue, global.currentdialogueline].y
            }
        }
    }
        } else {
            if selectedanswer = -1 and drawanswer[0] &gt; 0.95{
            alarm[3] = 30
            selectedanswer = 30
            audio_play_sound(sndButtonSelect,0,0)
        }
    }
}

if global.fight = 1 {
    if global.fightturn = 1 and drawfightUErect &gt; 0.95 {
        if currentanswerfight = 0 { fightreload = 30 global.fightturn = 2 audio_play_sound(sndButtonSelect,0,0) }
        if currentanswerfight = 1 { fightreload = 30 global.fightturn = 3 audio_play_sound(sndButtonSelect,0,0) if objEnemyFight.energy &lt;= 0 global.fightturn = 13 alarm[5] = 2 }
    }
    if global.fightturn = 4 {
        if attackstrength &lt; 1 { 
            if attackstrength = 0 audio_play_sound(sndCharge1, 0, 0)
            if attackstrength = 0.2 audio_play_sound(sndCharge2, 0, 0)
            if attackstrength = 0.4 audio_play_sound(sndCharge3, 0, 0)
            if attackstrength = 0.6 audio_play_sound(sndCharge4, 0, 0)
            if attackstrength = 0.8 audio_play_sound(sndCharge5, 0, 0)
            attackstrength += 0.2 
            mouseshake = 3
        }
        if attackstrength &gt;= 1 {attacktimeout = 90 mousefightdraw = 0 objPlayerFight.image_speed = 0.25 global.fightturn = 5 instance_create(objPlayerFight.x + 60, objPlayerFight.y - 15, objSuccessMark) }
    }
    if global.fightturn = 10 and instance_exists(objMouseButton) {
        with objMouseButton {instance_create(x,y,objSuccessMark) instance_destroy()}
        objPlayerFight.image_index = 0
        objPlayerFight.image_speed = 0.2
        objPlayerFight.sprite_index = sprHeroPunch
        global.shake = 4
        _damage = irandom_range(24, 28)
        my_id = instance_create(objEnemyFight.x, objEnemyFight.y - 10, objEffect) 
        objEnemyFight.damage = 0.5 
        my_id = instance_create(objEnemyFight.x - 10, objEnemyFight.y - 20, objDamageEffect) 
        my_id.damage = _damage
        objEnemyFight.hp -= _damage
        my_id = instance_create(objPlayerFight.x - 10, objPlayerFight.y - 20, objDamageEffect) 
        my_id.damage = "КОНТРУДАР"
        audio_play_sound(sndDamage,0,0)
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>fade = 1
//game_save("checkpoint")
global.lastcheckpoint = room
file = file_text_open_write("checkpoint.txt")
file_text_write_string(file, room)
file_text_close(file)
if room = rmThirdFloor {
    global.darksurface = surface_create(room_width, room_height)
    surface_set_target(global.darksurface)
    draw_clear_alpha(merge_color(c_white, c_black, 0.4), 1)
    surface_reset_target()
}

if room = rmThirdFloor {
    music = audio_play_sound(musAmbient,0,1)
}

if room = rmFirstLevel {
    global.task = "Пройти в поликлинику"
}
if room = rmFirstFloor {
    //if global.task = "Пройти в поликлинику" {
    global.task = "Пройти в поликлинику"
    with objPlayer active = 0
    firstfloorsequence = 1
    //}
    music = audio_play_sound(musFirstFloor,0,1)
}
if room = rmFirstDoctor {
    global.task = "Пройти осмотр"
    music = audio_play_sound(musFirstDoctor,0,1)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if drawfightUE = 0 and drawdialogUE = 0 and global.fight = 0 and global.dialogue = 0 and firstfloorsequence = 0 {

draw_set_halign(fa_right)
draw_set_valign(fa_center)

draw_set_color(make_color_rgb(28,28,38))
draw_set_font(fntDialogue)
draw_sprite_ext(sprTaskRectangle, 0, view_xview[0] + view_wview[0] - 10 - 1 + 0.75 + taskplusx, view_yview[0] + 20 + 1 + 5 + 0.75, 0.6, 0.6, 0, draw_set_color(make_color_rgb(28,28,38)), 1)
draw_text_transformed(view_xview[0] + view_wview[0] - 2 - 3 + 0.75, view_yview[0] + 10 + 3 + 0.75, "Задание:", 1.2, 1.2, 0)
draw_text_transformed(view_xview[0] + view_wview[0] - 20 + 0.75 + taskplusx, view_yview[0] + 20 + 4 + 0.75, global.task, 1.2, 1.2, 0)
draw_set_color(c_white)
draw_sprite_ext(sprTaskRectangle, 0, view_xview[0] + view_wview[0] - 10 - 1 + taskplusx, view_yview[0] + 20 + 1 + 5, 0.6, 0.6, 0, c_white, 1)
draw_text_transformed(view_xview[0] + view_wview[0] - 2 - 3, view_yview[0] + 10 + 3, "Задание:", 1.2, 1.2, 0)
draw_text_transformed(view_xview[0] + view_wview[0] - 20 + taskplusx, view_yview[0] + 20 + 4, global.task, 1.2, 1.2, 0)

taskplusx -= taskplusx * 0.1

if taskstep = 1 {
    /*taskcompleted = 0
taskstep = 0
nexttask = ""*/
    audio_play_sound(sndButtonSuccess,0,0)
    taskcompleted = 270
    taskstep = 2
}
if taskstep = 2 {
    if taskcompleted &lt; 500 taskcompleted += 20 else taskstep = 3
    //draw_sprite_ext(sprKeyboardCircleSmall, 0, x, y, ((taskcompleted - 270) / (500 - 270)) * 0.2, ((taskcompleted - 270) / (500 - 270)) * 0.2, 0, c_lime, ((taskcompleted - 270) / (500 - 270)))
    //draw_sprite_ext(sprKeyboardCircleSmall, 0, x, y, (taskcompleted / 500) * 0.2, (taskcompleted / 500) * 0.2, 0, c_lime, (taskcompleted / 500))
    draw_sprite_ext(sprCircleLight, 0, view_xview[0] + view_wview[0] - 10 - 1 + taskplusx, view_yview[0] + 20 + 1 + 5, 0.25 * (taskcompleted / 500), 0.25 * (taskcompleted / 500), 0, c_lime, 0.5 * (taskcompleted / 500))
    draw_sprite_ext(sprSuccessMarkGreen, 0, view_xview[0] + view_wview[0] - 10 - 1 + taskplusx, view_yview[0] + 20 + 1 + 5, 0.6 * (1 + lengthdir_y(0.5 - taskcompleted * 0.001, taskcompleted)), 0.6 * (1 + lengthdir_y(0.5 - taskcompleted * 0.001, taskcompleted)), 0, c_white, 1)
}
if taskstep = 3 {
    if taskcompleted &lt; 560 taskcompleted += 1 else taskstep = 4
    draw_sprite_ext(sprCircleLight, 0, view_xview[0] + view_wview[0] - 10 - 1 + taskplusx, view_yview[0] + 20 + 1 + 5, 0.25, 0.25, 0, c_lime, 0.5)
    draw_sprite_ext(sprSuccessMarkGreen, 0, view_xview[0] + view_wview[0] - 10 - 1 + taskplusx, view_yview[0] + 20 + 1 + 5, 0.6, 0.6, 0, c_white, 1)
}
if taskstep = 4 {
    global.task = nexttask
    taskcompleted = 0
    taskplusx = 500
    taskstep = 0
}

}
if room = rmThirdFloor {
    if surface_exists(global.darksurface)
    {
        draw_set_blend_mode(bm_subtract)
        draw_surface(global.darksurface,0,0)
        draw_set_blend_mode(bm_normal)
    }
}


if drawfightUE = 1 {
    //drawUErect += (50 - drawUErect) * 0.15
    drawUErect += (1 - drawUErect) * 0.15
    if drawUErect &gt; 0.5 { drawUErect2 += (1 - drawUErect2) * 0.15 }
    //draw_set_color(c_black)
    //draw_set_color(make_color_rgb(51,51,68))
    draw_set_color(make_color_rgb(28,28,38))
    //draw_rectangle(view_xview[0] - 5, view_yview[0] - 5, view_xview[0] + view_wview[0] + 5, view_yview[0] + drawUErect * 0.5,0)
    //draw_set_alpha(0.5)
    draw_rectangle(view_xview[0] - 5, view_yview[0] + view_hview[0] + 5, view_xview[0] + view_wview[0] + 5, view_yview[0] + view_hview[0] - drawUErect * 50,0)
    //draw_set_alpha(1)
    draw_set_color(c_white)
    
    i = 0
    repeat(10) {
        draw_sprite_ext(sprTurnIndicator, 0, view_xview[0] + fightturnx[i], view_yview[0] + view_hview[0] + 50 - drawUErect * 50, 1, 1, 0, merge_color(make_color_rgb(28,28,38), c_white, 0.10 * max(0,(1 - (fightturnx[i] / 185)))), 1)
        draw_sprite_ext(sprTurnIndicator, 0, view_xview[0] - fightturnx[i] + view_wview[0], view_yview[0] + view_hview[0] + 50 - drawUErect * 50, -1, 1, 0, merge_color(make_color_rgb(28,28,38), c_white, 0.10 * max(0,(1 - (fightturnx[i] / 185)))), 1)
        fightturnx[i] += 0.75
        if fightturnx[i] &gt; 200 fightturnx[i] = 0
    i += 1
    }
    
    drawfightnamedir += 6
    drawfightrectdir += 5
    
    //draw_set_font(fntFightNames)
    draw_set_font(fntDialogue)
    draw_set_valign(fa_bottom)
    draw_set_halign(fa_right)
    //draw_set_color(c_black)
    //draw_set_alpha(0.5)
    //draw_text_transformed(view_xview[0] + view_wview[0] - 60 + (120 + string_width(objEnemyFight.name)) * (1 - drawUErect2) + 1, view_yview[0] + view_hview[0] - 35 + 1, objEnemyFight.name, 0.75, 0.75,0)
    //draw_set_color(c_white)
    //draw_set_alpha(1)
    //draw_text_transformed(view_xview[0] + view_wview[0] - 60 + (120 + string_width(objEnemyFight.name)) * (1 - drawUErect2), view_yview[0] + view_hview[0] - 35, objEnemyFight.name, 0.75, 0.75,0)
    i = 1
    repeat(string_length(objEnemyFight.name)) {
        draw_set_color(c_black)
        draw_set_alpha(0.5)
        //draw_text_transformed(view_xview[0] + view_wview[0] - 60 + (120 + string_width(objEnemyFight.name)) * (1 - drawUErect2) - string_width(objEnemyFight.name) * 0.75 + string_width(string_copy(objEnemyFight.name,1,i - 1)) * 0.75 + 1, view_yview[0] + view_hview[0] - 35 + 1, string_copy(objEnemyFight.name,i,1), 0.75, 0.75,0)
        draw_text_transformed(view_xview[0] + view_wview[0] - 60 + (120 + string_width(objEnemyFight.name)) * (1 - drawUErect2) - string_width(objEnemyFight.name) * 1 + string_width(string_copy(objEnemyFight.name,1,i - 1)) * 1 + 1, view_yview[0] + view_hview[0] - 35 + 1, string_copy(objEnemyFight.name,i,1), 1, 1,0)
        draw_set_color(c_white)
        draw_set_alpha(1)
        //draw_text_transformed(view_xview[0] + view_wview[0] - 60 + (120 + string_width(objEnemyFight.name)) * (1 - drawUErect2) - string_width(objEnemyFight.name) * 0.75 + string_width(string_copy(objEnemyFight.name,1,i - 1)) * 0.75, view_yview[0] + view_hview[0] - 35 - 0.75 + lengthdir_y(0.75, drawfightnamedir - 20 * i), string_copy(objEnemyFight.name,i,1), 0.75, 0.75,0)
        draw_text_transformed(view_xview[0] + view_wview[0] - 60 + (120 + string_width(objEnemyFight.name)) * (1 - drawUErect2) - string_width(objEnemyFight.name) * 1 + string_width(string_copy(objEnemyFight.name,1,i - 1)) * 1, view_yview[0] + view_hview[0] - 35 - 1 + lengthdir_y(1, drawfightnamedir - 20 * i), string_copy(objEnemyFight.name,i,1), 1, 1,0)
        i += 1
    }
    //draw_set_font(fntFightNames)
    draw_set_font(fntDialogue)
    draw_set_valign(fa_bottom)
    draw_set_halign(fa_left)
    //draw_set_color(c_black)
    //draw_set_alpha(0.5)
    //draw_text_transformed(view_xview[0] + 60 - (120 + string_width(objPlayerFight.name)) * (1 - drawUErect2) + 1, view_yview[0] + view_hview[0] - 35 + 1, objPlayerFight.name, 0.75, 0.75,0)
    //draw_set_color(c_white)
    //draw_set_alpha(1)
    i = 1
    repeat(string_length(objPlayerFight.name)) {
        draw_set_color(c_black)
        draw_set_alpha(0.5)
        //draw_text_transformed(view_xview[0] + 60 - (120 + string_width(objPlayerFight.name)) * (1 - drawUErect2) + string_width(string_copy(objPlayerFight.name,1,i - 1)) * 0.75 + 1, view_yview[0] + view_hview[0] - 35 + 1, string_copy(objPlayerFight.name,i,1), 0.75, 0.75,0)
        draw_text_transformed(view_xview[0] + 60 - (120 + string_width(objPlayerFight.name)) * (1 - drawUErect2) + string_width(string_copy(objPlayerFight.name,1,i - 1)) * 1 + 1, view_yview[0] + view_hview[0] - 35 + 1, string_copy(objPlayerFight.name,i,1), 1, 1,0)
        draw_set_color(c_white)
        draw_set_alpha(1)
        //draw_text_transformed(view_xview[0] + 60 - (120 + string_width(objPlayerFight.name)) * (1 - drawUErect2) + string_width(string_copy(objPlayerFight.name,1,i - 1)) * 0.75, view_yview[0] + view_hview[0] - 35 - 0.75 + lengthdir_y(0.75, drawfightnamedir - 20 * i), string_copy(objPlayerFight.name,i,1), 0.75, 0.75,0)
        draw_text_transformed(view_xview[0] + 60 - (120 + string_width(objPlayerFight.name)) * (1 - drawUErect2) + string_width(string_copy(objPlayerFight.name,1,i - 1)) * 1, view_yview[0] + view_hview[0] - 35 - 1 + lengthdir_y(1, drawfightnamedir - 20 * i), string_copy(objPlayerFight.name,i,1), 1, 1,0)
        i += 1
    }
    //draw_text_transformed(view_xview[0] + 60 - (120 + string_width(objPlayerFight.name)) * (1 - drawUErect2), view_yview[0] + view_hview[0] - 35, objPlayerFight.name, 0.75, 0.75,0)
    
    //sprtestdiaogue width = 109 height = 72
    //draw_sprite_ext(sprMainHeroPortrait, 0, view_xview[0] + view_wview[0] + 120 * (1 - drawUErect), view_yview[0] + view_hview[0], 0.75, 0.75, 0, c_white, 1)
    //draw_sprite_ext(sprMainHeroPortrait, 0, view_xview[0] - 120 * (1 - drawUErect), view_yview[0] + view_hview[0], -0.75, 0.75, 0, c_white, 1)
    
    heroportraitindex += 0.1
    
    draw_sprite_ext(sprJanitorPortrait, heroportraitindex, view_xview[0] + view_wview[0] + 120 * (1 - drawUErect), view_yview[0] + view_hview[0] + 10, 1, 1, 0, c_white, 1)
    draw_sprite_ext(sprMainHeroPortrait, heroportraitindex, view_xview[0] - 120 * (1 - drawUErect), view_yview[0] + view_hview[0] + 10, -1, 1, 0, c_white, 1)
    
    
    if drawfighticons &lt;= 0 drawfighticons = 1 else drawfighticons -= 0.05
    
    draw_sprite_ext(sprFightBarsIcons, 0, view_xview[0] + view_wview[0] - 75 + 0.5, view_yview[0] + view_hview[0] - 25 + 70 * (1 - drawUErect) + 0.5, 1 + 0.25*drawfighticons, 1 + 0.25*drawfighticons, 0, c_black, 0.5)
    draw_sprite_ext(sprFightBarsIcons, 1, view_xview[0] + view_wview[0] - 75 + 0.5, view_yview[0] + view_hview[0] - 10 + 70 * (1 - drawUErect) + 0.5, 1 + 0.25*drawfighticons, 1 + 0.25*drawfighticons, 0, c_black, 0.5)
    draw_sprite_ext(sprFightBarsIcons, 0, view_xview[0] + 75 + 0.5, view_yview[0] + view_hview[0] - 25 + 70 * (1 - drawUErect) + 0.5, 1 + 0.25*drawfighticons, 1 + 0.25*drawfighticons, 0, c_black, 0.5)
     
    
    draw_sprite_ext(sprFightBarsIcons, 0, view_xview[0] + view_wview[0] - 75, view_yview[0] + view_hview[0] - 25 + 70 * (1 - drawUErect), 1 + 0.25*drawfighticons, 1 + 0.25*drawfighticons, 0, c_white, 1)
    draw_sprite_ext(sprFightBarsIcons, 1, view_xview[0] + view_wview[0] - 75, view_yview[0] + view_hview[0] - 10 + 70 * (1 - drawUErect), 1 + 0.25*drawfighticons, 1 + 0.25*drawfighticons, 0, c_white, 1)
    draw_sprite_ext(sprFightBarsIcons, 0, view_xview[0] + 75, view_yview[0] + view_hview[0] - 25 + 70 * (1 - drawUErect), 1 + 0.25*drawfighticons, 1 + 0.25*drawfighticons, 0, c_white, 1)
    
    draw_set_color(merge_color(make_color_rgb(171, 20, 20), c_black, 0.75))
    draw_rectangle(view_xview[0] + view_wview[0] - 75 - 10, view_yview[0] + view_hview[0] - 25 + 70 * (1 - drawUErect) - 4, view_xview[0] + view_wview[0] - 75 - 10 - 70, view_yview[0] + view_hview[0] - 25 + 70 * (1 - drawUErect) + 4, 0)
    draw_rectangle(view_xview[0] + 75 + 10, view_yview[0] + view_hview[0] - 25 + 70 * (1 - drawUErect) - 4, view_xview[0] + 75 + 10 + 70, view_yview[0] + view_hview[0] - 25 + 70 * (1 - drawUErect) + 4, 0)
    
    draw_set_color(make_color_rgb(245, 210, 10))
    if objEnemyFight.hp &gt; 0  draw_rectangle(view_xview[0] + view_wview[0] - 75 - 10, view_yview[0] + view_hview[0] - 25 + 70 * (1 - drawUErect) - 4, view_xview[0] + view_wview[0] - 75 - 10 - 70 * (objEnemyFight.needhp/objEnemyFight.maxhp), view_yview[0] + view_hview[0] - 25 + 70 * (1 - drawUErect) + 4, 0)
    if objPlayerFight.hp &gt; 0  draw_rectangle(view_xview[0] + 75 + 10, view_yview[0] + view_hview[0] - 25 + 70 * (1 - drawUErect) - 4, view_xview[0] + 75 + 10 + 70 * (objPlayerFight.needhp/objPlayerFight.maxhp), view_yview[0] + view_hview[0] - 25 + 70 * (1 - drawUErect) + 4, 0)
    
    draw_set_color(make_color_rgb(171, 20, 20))
    if objEnemyFight.hp &gt; 0  draw_rectangle(view_xview[0] + view_wview[0] - 75 - 10, view_yview[0] + view_hview[0] - 25 + 70 * (1 - drawUErect) - 4, view_xview[0] + view_wview[0] - 75 - 10 - 70 * (objEnemyFight.hp/objEnemyFight.maxhp), view_yview[0] + view_hview[0] - 25 + 70 * (1 - drawUErect) + 4, 0)
    if objPlayerFight.hp &gt; 0  draw_rectangle(view_xview[0] + 75 + 10, view_yview[0] + view_hview[0] - 25 + 70 * (1 - drawUErect) - 4, view_xview[0] + 75 + 10 + 70 * (objPlayerFight.hp/objPlayerFight.maxhp), view_yview[0] + view_hview[0] - 25 + 70 * (1 - drawUErect) + 4, 0)

    draw_set_color(merge_color(make_color_rgb(0, 192, 192), c_black, 0.75))
    draw_rectangle(view_xview[0] + view_wview[0] - 75 - 10, view_yview[0] + view_hview[0] - 10 + 70 * (1 - drawUErect) - 4, view_xview[0] + view_wview[0] - 75 - 10 - 60, view_yview[0] + view_hview[0] - 10 + 70 * (1 - drawUErect) + 4, 0)    

    draw_set_color(make_color_rgb(245, 210, 10))
    if objEnemyFight.energy &gt; 0 draw_rectangle(view_xview[0] + view_wview[0] - 75 - 10, view_yview[0] + view_hview[0] - 10 + 70 * (1 - drawUErect) - 4, view_xview[0] + view_wview[0] - 75 - 10 - 60 * (objEnemyFight.needenergy/100), view_yview[0] + view_hview[0] - 10 + 70 * (1 - drawUErect) + 4, 0)    
    
    draw_set_color(make_color_rgb(0, 192, 192))
    if objEnemyFight.energy &gt; 0 draw_rectangle(view_xview[0] + view_wview[0] - 75 - 10, view_yview[0] + view_hview[0] - 10 + 70 * (1 - drawUErect) - 4, view_xview[0] + view_wview[0] - 75 - 10 - 60 * (objEnemyFight.energy/100), view_yview[0] + view_hview[0] - 10 + 70 * (1 - drawUErect) + 4, 0)
    
    //245 210 10
    
    if global.fightturn = 1 {
    
        if mouse_x &lt; objPlayerFight.x + 60 + 38 and mouse_x &gt; objPlayerFight.x + 60 - 38 {
            if mouse_y &lt; objPlayerFight.y - 20 + 6 and mouse_y &gt; objPlayerFight.y - 20 - 6 {
                //if currentanswerfight != 0 { currentanswerfight = 0 audio_play_sound(sndButtonHover,0,0) }
                if currentanswerfight != 0 { currentanswerfight = 0}
            } else { if mouse_y &lt; objPlayerFight.y - 20 + 15 + 6 and mouse_y &gt; objPlayerFight.y - 20 + 15 - 6  {
                //if currentanswerfight != 1 { currentanswerfight = 1 audio_play_sound(sndButtonHover,0,0) }
                if currentanswerfight != 1 { currentanswerfight = 1 }
            } else { currentanswerfight = 2 } }
        }
    
        i = 0
        repeat(2) {
        text = "Атаковать"
        if i = 1 { text = "Защищаться" if objEnemyFight.energy &lt;= 0 text = "Пощадить" }
        color = c_red
        if i = 1 color = c_aqua
        drawfightUErect += (1 - drawfightUErect) * 0.1
        test = 1
        if i = 1 test = -1
        draw_sprite_ext(sprFightRect, 0, objPlayerFight.x + 60 + 0.45 + (300 - 300 * drawfightUErect) * test, objPlayerFight.y - 20 + 15 * i + 0.45, 1, 1, 0,merge_color(color, c_black, 0.5), 1)
        draw_sprite_ext(sprFightRect, 1, objPlayerFight.x + 60 + (300 - 300 * drawfightUErect) * test, objPlayerFight.y - 20 + 15 * i, 1, 1, 0,c_white, 0.25)
        if currentanswerfight = i draw_sprite_ext(sprFightRect, 0, objPlayerFight.x + 60 + (300 - 300 * drawfightUErect) * test - 0.25 - lengthdir_x(0.25, drawfightrectdir), objPlayerFight.y - 20 + 15 * i - 0.25 - lengthdir_x(0.25, drawfightrectdir), 1, 1, 0,merge_color(color, c_white, 0.25 + lengthdir_x(0.25, drawfightrectdir)), 1) else
        draw_sprite_ext(sprFightRect, 0, objPlayerFight.x + 60 + (300 - 300 * drawfightUErect) * test, objPlayerFight.y - 20 + 15 * i, 1, 1, 0,color, 1)
        draw_set_font(fntDialogue)
        draw_set_valign(fa_center)
        draw_set_halign(fa_center)
        draw_set_color(merge_color(color, c_black, 0.5))
        draw_text(objPlayerFight.x + 60 + 0.45 + (300 - 300 * drawfightUErect) * test, objPlayerFight.y - 20 + 15 * i + 0.45, text)
        if currentanswerfight = i draw_set_color(merge_color(color, c_white, 0.25 + lengthdir_x(0.25, drawfightrectdir))) else draw_set_color(color)
        if currentanswerfight = i draw_text(objPlayerFight.x + 60 + (300 - 300 * drawfightUErect) * test - 0.25 - lengthdir_x(0.25, drawfightrectdir), objPlayerFight.y - 20 + 15 * i  - 0.25 - lengthdir_x(0.25, drawfightrectdir), text) else 
        draw_text(objPlayerFight.x + 60 + (300 - 300 * drawfightUErect) * test, objPlayerFight.y - 20 + 15 * i, text) 
        draw_set_color(c_white)
        i += 1
        }
    }
    
    if global.fightturn = 2 {
        if fightreload &gt; 0 fightreload -= 1 else { mousechargex = objPlayerFight.x + 60 mousechargey = objPlayerFight.y - 15 objPlayerFight.sprite_index = sprHeroPunch2 objPlayerFight.image_speed = 0 objPlayerFight.image_index = 0 global.fightturn = 4 attackstrength = 0 drawfightUErect = 0}
        text = "Атаковать"
        color = c_red
        test = 1
        draw_sprite_ext(sprFightRect, 0, objPlayerFight.x + 60 + 0.45 + (300 - 300 * drawfightUErect) * test, objPlayerFight.y - 20 + 0.45, 1, 1, 0,merge_color(color, c_black, 0.5), 1)
        draw_sprite_ext(sprFightRect, 1, objPlayerFight.x + 60 + (300 - 300 * drawfightUErect) * test, objPlayerFight.y - 20, 1, 1, 0,c_white, 0.25)
        draw_sprite_ext(sprFightRect, 0, objPlayerFight.x + 60 + (300 - 300 * drawfightUErect) * test, objPlayerFight.y - 20, 1, 1, 0,merge_color(color,c_white, (fightreload mod 2) * 1), 1)
        //draw_sprite_ext(sprFightRect, 0, objPlayerFight.x + 60, objPlayerFight.y - 20, 1, 1, 0,merge_color(color,c_white, (fightreload mod 2) * 0.5), 1)
        draw_set_font(fntDialogue)
        draw_set_valign(fa_center)
        draw_set_halign(fa_center)
        draw_set_color(merge_color(color, c_black, 0.5))
        draw_text(objPlayerFight.x + 60 + 0.45 + (300 - 300 * drawfightUErect) * test, objPlayerFight.y - 20 + 0.45, text)
        draw_set_color(merge_color(color,c_white, (fightreload mod 2) * 1))
        draw_text(objPlayerFight.x + 60 + (300 - 300 * drawfightUErect) * test, objPlayerFight.y - 20, text) 
        draw_set_color(c_white)
    }
    if global.fightturn = 3 {
        if fightreload &gt; 0 fightreload -= 1 else { global.fightturn = 7 drawfightUErect = 0 objEnemyFight.sprite_index = sprJanitorHit objEnemyFight.image_speed = 0 objEnemyFight.image_index = 0}
        text = "Защищаться"
        color = c_aqua
        test = -1
        draw_sprite_ext(sprFightRect, 0, objPlayerFight.x + 60 + 0.45 + (300 - 300 * drawfightUErect) * test, objPlayerFight.y - 20 + 15 + 0.45, 1, 1, 0,merge_color(color, c_black, 0.5), 1)
        draw_sprite_ext(sprFightRect, 1, objPlayerFight.x + 60 + (300 - 300 * drawfightUErect) * test, objPlayerFight.y - 20 + 15, 1, 1, 0,c_white, 0.25)
        draw_sprite_ext(sprFightRect, 0, objPlayerFight.x + 60 + (300 - 300 * drawfightUErect) * test, objPlayerFight.y - 20 + 15, 1, 1, 0,merge_color(color,c_white, (fightreload mod 2) * 1), 1)
        draw_set_font(fntDialogue)
        draw_set_valign(fa_center)
        draw_set_halign(fa_center)
        draw_set_color(merge_color(color, c_black, 0.5))
        draw_text(objPlayerFight.x + 60 + 0.45 + (300 - 300 * drawfightUErect) * test, objPlayerFight.y - 20 + 0.45 + 15, text)
        draw_set_color(merge_color(color,c_white, (fightreload mod 2) * 1))
        draw_text(objPlayerFight.x + 60 + (300 - 300 * drawfightUErect) * test, objPlayerFight.y - 20 + 15, text) 
        draw_set_color(c_white)
    }
    if global.fightturn = 4 { 
        if attacktimeout &gt; 0 attacktimeout -= 1 else {attacktimeout = 90 mousefightdraw = 0 objPlayerFight.image_speed = 0.25 global.fightturn = 5}
        mousefightdraw += (1 - mousefightdraw) * 0.1
        
        mousechargex += ((objPlayerFight.x + 60) - mousechargex) * 0.2       
        mousechargey += ((objPlayerFight.y - 15) - mousechargey) * 0.2
        
        if attackstrength &gt; 0.8 draw_sprite_ext(sprKeyboardCircleSmall, 1, mousechargex, mousechargey, mousefightdraw * 0.75 * 1, mousefightdraw * 0.75 * 1, 0, merge_color(c_maroon, c_red, 1), 1)
        if attackstrength &gt; 0.6 draw_sprite_ext(sprKeyboardCircleSmall, 1, mousechargex, mousechargey, mousefightdraw * 0.75 * 0.8, mousefightdraw * 0.75 * 0.8, 0, merge_color(c_maroon, c_red, 0.8), 1)
        if attackstrength &gt; 0.4 draw_sprite_ext(sprKeyboardCircleSmall, 1, mousechargex, mousechargey, mousefightdraw * 0.75 * 0.6, mousefightdraw * 0.75 * 0.6, 0, merge_color(c_maroon, c_red, 0.6), 1)
        if attackstrength &gt; 0.2 draw_sprite_ext(sprKeyboardCircleSmall, 1, mousechargex, mousechargey, mousefightdraw * 0.75 * 0.4, mousefightdraw * 0.75 * 0.4, 0, merge_color(c_maroon, c_red, 0.4), 1)
        if attackstrength &gt; 0 draw_sprite_ext(sprKeyboardCircleSmall, 1, mousechargex, mousechargey, mousefightdraw * 0.75 * 0.2, mousefightdraw * 0.75 * 0.2, 0, merge_color(c_maroon, c_red, 0.2), 1)

        draw_sprite_ext(sprKeyboardCircleSmall, 0, mousechargex, objPlayerFight.y - 15, mousefightdraw * 0.75, mousefightdraw * 0.75, 0, c_red, 1)
        if mouseicondir &gt; 0 mouseicondir -= 1 else {mouseicondir = 15 if mouseiconindex = 0 mouseiconindex = 1 else mouseiconindex = 0}
        draw_sprite_ext(sprMouseButton, mouseiconindex, mousechargex, mousechargey, mousefightdraw * 0.75, mousefightdraw * 0.75, 0, c_white, 1)
    }
    if global.fightturn = 6 {
        if ds_list_empty(global.buttons) and buttonssuccess = -1 {
            //_startx = objPlayerFight - (buttonscount - 1) * 10
            _startx = objPlayerFight.x
            if buttonscount = 1 _startx = objPlayerFight.x
            if buttonscount = 2 _startx = objPlayerFight.x - 10
            if buttonscount = 3 _startx = objPlayerFight.x - 20
            if buttonscount = 4 _startx = objPlayerFight.x - 30
            if buttonscount = 5 _startx = objPlayerFight.x - 40
            _lastbutton = choose(0,1,2,3)
            my_id = instance_create(_startx, objPlayerFight.y - 40, objButton)
            my_id.image_index = _lastbutton
            my_id.alarm[0] = 5
            ds_list_add(global.buttons, my_id)
            i = 1
            repeat(buttonscount - 1)
            {
                _test = choose(0,1,2,3)
                while(_test = _lastbutton) { _test = choose(0,1,2,3) }
                my_id = instance_create(_startx + 20 * i, objPlayerFight.y - 40, objButton)
                my_id.image_index = _test
                my_id.alarm[0] = 5 + 5 * i
                ds_list_add(global.buttons, my_id)
                _lastbutton = _test
                i += 1
            }
        } else {
            if !ds_list_empty(global.buttons) and buttonssuccess = -1{
                if keyboard_check_pressed(ord("W")) {
                    if ds_list_find_value(global.buttons, 0).image_index = 0 {
                        with ds_list_find_value(global.buttons, 0) { instance_create(x,y,objSuccessMark) instance_destroy() }
                        ds_list_delete(global.buttons, 0)
                    } else { with objButton { active = 0 failed = 1 } buttonssuccess = 0 }
                }  else {
                if keyboard_check_pressed(ord("A")) {
                    if ds_list_find_value(global.buttons, 0).image_index = 1 {
                        with ds_list_find_value(global.buttons, 0) { instance_create(x,y,objSuccessMark) instance_destroy() }
                        ds_list_delete(global.buttons, 0)
                    } else { with objButton { active = 0 failed = 1 } buttonssuccess = 0 }
                }  else {
                if keyboard_check_pressed(ord("S")) {
                    if ds_list_find_value(global.buttons, 0).image_index = 2 {
                        with ds_list_find_value(global.buttons, 0) { instance_create(x,y,objSuccessMark) instance_destroy() }
                        ds_list_delete(global.buttons, 0)
                    } else { with objButton { active = 0 failed = 1 } buttonssuccess = 0 }
                }  else {
                if keyboard_check_pressed(ord("D")) {
                    if ds_list_find_value(global.buttons, 0).image_index = 3 {
                        with ds_list_find_value(global.buttons, 0) { instance_create(x,y,objSuccessMark) instance_destroy() }
                        ds_list_delete(global.buttons, 0)
                    } else { with objButton { active = 0 failed = 1 }  buttonssuccess = 0 }
                } 
                }
                } 
                }
                if ds_list_empty(global.buttons) {
                    global.fightturn = 8
                    buttonssuccess = 1
                    ds_list_clear(global.buttons)
                    objEnemyFight.image_speed = 0.1
                }
            }
        }
    }
    if global.fightturn = 7 {
        if ds_list_empty(global.buttons) and buttonssuccess = -1 {
            //_startx = objPlayerFight - (buttonscount - 1) * 10
            _attack = irandom(1)
            _startx = objPlayerFight.x
            if _attack = 0 buttonscount += 1
            if buttonscount = 1 _startx = objPlayerFight.x
            if buttonscount = 2 _startx = objPlayerFight.x - 10
            if buttonscount = 3 _startx = objPlayerFight.x - 20
            if buttonscount = 4 _startx = objPlayerFight.x - 30
            if buttonscount = 5 _startx = objPlayerFight.x - 40
            
            if _attack = 1 _fakebutton = irandom(buttonscount - 1)
            
            _lastbutton = choose(0,1,2,3)
            my_id = instance_create(_startx, objPlayerFight.y - 40, objButton)
            my_id.image_index = _lastbutton
            my_id.alarm[0] = 5
            my_id.color = 1
            if _attack = 1 if _fakebutton = 0 my_id.fake = 1
            ds_list_add(global.buttons, my_id)
            i = 1
            repeat(buttonscount - 1)
            {
                _test = choose(0,1,2,3)
                while(_test = _lastbutton) { _test = choose(0,1,2,3) }
                my_id = instance_create(_startx + 20 * i, objPlayerFight.y - 40, objButton)
                my_id.image_index = _test
                my_id.alarm[0] = 5 + 5 * i
                my_id.color = 1
                if _attack = 1 if _fakebutton = i my_id.fake = 1
                if _attack = 0 {if i = buttonscount - 1 {my_id.image_blend = merge_color(c_white, c_aqua, 0.75) my_id.alarm[0] = 5 + 5 * i + 15}}
                ds_list_add(global.buttons, my_id)
                _lastbutton = _test
                i += 1
            }
            if _attack = 0 buttonscount -= 1
            
            
        } else {
            if !ds_list_empty(global.buttons) and buttonssuccess = -1{
                if keyboard_check_pressed(ord("W")) {
                    if ds_list_find_value(global.buttons, 0).image_index = 0 {
                        with ds_list_find_value(global.buttons, 0) { my_id = instance_create(x,y,objSuccessMark) my_id.color = ds_list_find_value(global.buttons, 0).color instance_destroy() }
                        ds_list_delete(global.buttons, 0)
                    } else { with objButton { active = 0 failed = 1 } buttonssuccess = 0 }
                }  else {
                if keyboard_check_pressed(ord("A")) {
                    if ds_list_find_value(global.buttons, 0).image_index = 1 {
                        with ds_list_find_value(global.buttons, 0) { my_id = instance_create(x,y,objSuccessMark) my_id.color = ds_list_find_value(global.buttons, 0).color instance_destroy() }
                        ds_list_delete(global.buttons, 0)
                    } else { with objButton { active = 0 failed = 1 } buttonssuccess = 0 }
                }  else {
                if keyboard_check_pressed(ord("S")) {
                    if ds_list_find_value(global.buttons, 0).image_index = 2 {
                        with ds_list_find_value(global.buttons, 0) { my_id = instance_create(x,y,objSuccessMark) my_id.color = ds_list_find_value(global.buttons, 0).color instance_destroy() }
                        ds_list_delete(global.buttons, 0)
                    } else { with objButton { active = 0 failed = 1 } buttonssuccess = 0 }
                }  else {
                if keyboard_check_pressed(ord("D")) {
                    if ds_list_find_value(global.buttons, 0).image_index = 3 {
                        with ds_list_find_value(global.buttons, 0) { my_id = instance_create(x,y,objSuccessMark) my_id.color = ds_list_find_value(global.buttons, 0).color instance_destroy() }
                        ds_list_delete(global.buttons, 0)
                    } else { with objButton { active = 0 failed = 1 }  buttonssuccess = 0 }
                }  } } }
                if ds_list_empty(global.buttons) {
                    global.fightturn = 9
                    buttonssuccess = 1
                    ds_list_clear(global.buttons)
                    objEnemyFight.image_speed = 0.1
                }
            }
        }
    }
}

if drawdialogUE = 1 {
    drawdialogUErect += (50 - drawdialogUErect) * 0.15
    
    //draw_set_color(c_black)
    //draw_set_color(make_color_rgb(51,51,68))
    draw_set_color(make_color_rgb(28,28,38))
    draw_rectangle(view_xview[0] - 5, view_yview[0] - 5, view_xview[0] + view_wview[0] + 5, view_yview[0] + drawdialogUErect * 0.5,0)
    draw_rectangle(view_xview[0] - 5, view_yview[0] + view_hview[0] + 5, view_xview[0] + view_wview[0] + 5, view_yview[0] + view_hview[0] - drawdialogUErect,0)
    draw_set_color(c_white)
} else drawdialogUErect = 0

if drawdialog = 1 {

    if global.currentdialogue = 1 and global.currentdialogueline = 7 {
        draw_sprite_ext(sprDoctorTest, 0, view_xview[0] + view_wview[0] / 2 + 60, view_yview[0] + view_hview[0] / 2 + 15, 0.145, 0.145, 0, make_color_rgb(28,28,38), 1)
        draw_sprite_ext(sprDoctorTest, 0, view_xview[0] + view_wview[0] / 2 + 60, view_yview[0] + view_hview[0] / 2 + 15, 0.14, 0.14, 0, c_white, 1)
    }
    if global.currentdialogue = 1 and global.currentdialogueline = 12 {
        draw_sprite_ext(sprDoctorTest, 1, view_xview[0] + view_wview[0] / 2 + 60, view_yview[0] + view_hview[0] / 2 + 15, 0.145, 0.145, 0, make_color_rgb(28,28,38), 1)
        draw_sprite_ext(sprDoctorTest, 1, view_xview[0] + view_wview[0] / 2 + 60, view_yview[0] + view_hview[0] / 2 + 15, 0.14, 0.14, 0, c_white, 1)
    }
    if global.currentdialogue = 1 and global.currentdialogueline = 14 {
        draw_sprite_ext(sprDoctorTest, 2, view_xview[0] + view_wview[0] / 2 + 60, view_yview[0] + view_hview[0] / 2 + 15, 0.205, 0.205, 0, make_color_rgb(28,28,38), 1)
        draw_sprite_ext(sprDoctorTest, 2, view_xview[0] + view_wview[0] / 2 + 60, view_yview[0] + view_hview[0] / 2 + 15, 0.2, 0.2, 0, c_white, 1)
    }
    
    draw_set_font(fntDialogue)
    drawdialogrect += (1 - drawdialogrect) * 0.15
    sw = string_width(global.dialogueline[global.currentdialogue, global.currentdialogueline]) + 10
    sh = string_height(global.dialogueline[global.currentdialogue, global.currentdialogueline]) + 5
    swt = string_width(global.dialogueline[global.currentdialogue, global.currentdialogueline]) 
    sht = string_height(global.dialogueline[global.currentdialogue, global.currentdialogueline])
    //draw_set_color(make_color_rgb(30,30,40))
    draw_set_color(make_color_rgb(70,70,94))
    draw_set_alpha(0.9)
    draw_roundrect_ext(global.dialoguetarget[global.currentdialogue, global.currentdialogueline].x - (sw / 2) * drawdialogrect, global.dialoguetarget[global.currentdialogue, global.currentdialogueline].y - 30, global.dialoguetarget[global.currentdialogue, global.currentdialogueline].x + (sw / 2) * drawdialogrect, global.dialoguetarget[global.currentdialogue, global.currentdialogueline].y - 30 - sh, 3, 3, 0)
    draw_set_alpha(1)
    draw_set_color(c_white)
    draw_set_valign(fa_top)
    draw_set_halign(fa_left)
    draw_text(global.dialoguetarget[global.currentdialogue, global.currentdialogueline].x - swt / 2, global.dialoguetarget[global.currentdialogue, global.currentdialogueline].y - 30 - sht - 2.5, string_copy(global.dialogueline[global.currentdialogue, global.currentdialogueline], 0, drawdialogletter))
    if drawdialogrect &gt; 0.99 { 
        if drawdialogletterdelay &lt;= 0 { if drawdialogletter &lt; string_length(global.dialogueline[global.currentdialogue, global.currentdialogueline]) { drawdialogletter += 1 if global.dialoguesound != -1 { audio_play_sound(global.dialoguesound,0,0) } } drawdialogletterdelay = 1 } else {
            drawdialogletterdelay -= 1
        }
    }
    if drawdialogletter &gt;= string_length(global.dialogueline[global.currentdialogue, global.currentdialogueline]) {
        if global.dialogueanswercount[global.currentdialogue, global.currentdialogueline] &gt; 0 {
            if instance_exists(objPlayer) {
                global.dialoguex = objPlayer.x
                global.dialoguey = objPlayer.y
            }
            i = 0
            repeat(global.dialogueanswercount[global.currentdialogue, global.currentdialogueline]) {
            if selectedanswer = -1 {
                if mouse_y &gt; view_yview[0] + view_hview[0] - 40 + (40/3) * i - 6 and mouse_y &lt; view_yview[0] + view_hview[0] - 40 + (40/3) * i + 6 {
                    if currentanswer != i { currentanswer = i audio_play_sound(sndButtonHover,0,0) }
                }
            }
            if i = 0 { drawanswer[i] += (1 - drawanswer[i]) * 0.1 } else { if drawanswer[i - 1] &gt; 0.3 drawanswer[i] += (1 - drawanswer[i]) * 0.1 }
            //draw_set_color(answercolor[i])
            if selectedanswer = -1 {
                //draw_set_color(global.dialogueanswerscolor[global.dialoganswersid[global.currentdialogue, global.currentdialogueline], i])
                answidth = string_width(global.dialogueanswers[global.dialoganswersid[global.currentdialogue, global.currentdialogueline], i])
                ansheight = string_height(global.dialogueanswers[global.dialoganswersid[global.currentdialogue, global.currentdialogueline], i])
                //if currentanswer = i draw_roundrect_ext(view_xview[0] + view_wview[0] / 2 - (view_wview[0] / 2 - answidth / 2) * (1 - drawanswer[i]) - answidth / 2 - 6,view_yview[0] + view_hview[0] - 40 + (40/3) * i - ansheight / 2 - 1 ,view_xview[0] + view_wview[0] / 2 - (view_wview[0] / 2 - answidth / 2) * (1 - drawanswer[i]) + answidth / 2 + 4,view_yview[0] + view_hview[0] - 40 + (40/3) * i + ansheight / 2 + 1,3,3,1)
                if currentanswer = i draw_sprite_ext(sprDialogueAnswerRect, 1, view_xview[0] + view_wview[0] / 2 - (view_wview[0] / 2 - answidth / 2) * (1 - drawanswer[i]), answerrecty, 1, 1, 0,c_white, 0.1)
                if currentanswer = i draw_sprite_ext(sprDialogueAnswerRect, 0, view_xview[0] + view_wview[0] / 2 - (view_wview[0] / 2 - answidth / 2) * (1 - drawanswer[i]), answerrecty, 1, 1, 0,global.dialogueanswerscolor[global.dialoganswersid[global.currentdialogue, global.currentdialogueline], i], 1)
                draw_set_valign(fa_center)
                draw_set_halign(fa_center)
                draw_set_color(merge_color(global.dialogueanswerscolor[global.dialoganswersid[global.currentdialogue, global.currentdialogueline], i], c_black, 0.5))
                draw_text(view_xview[0] + view_wview[0] / 2 - (view_wview[0] / 2 - answidth / 2) * (1 - drawanswer[i]) + 0.45, view_yview[0] + view_hview[0] - 40 + (40/3) * i + 0.45, global.dialogueanswers[global.dialoganswersid[global.currentdialogue, global.currentdialogueline], i])
                draw_set_color(global.dialogueanswerscolor[global.dialoganswersid[global.currentdialogue, global.currentdialogueline], i])
                draw_text(view_xview[0] + view_wview[0] / 2 - (view_wview[0] / 2 - answidth / 2) * (1 - drawanswer[i]), view_yview[0] + view_hview[0] - 40 + (40/3) * i, global.dialogueanswers[global.dialoganswersid[global.currentdialogue, global.currentdialogueline], i])
                draw_set_color(c_white)
                } else {
                    if currentanswer = i {
                        draw_set_color(global.dialogueanswerscolor[global.dialoganswersid[global.currentdialogue, global.currentdialogueline], i])
                        answidth = string_width(global.dialogueanswers[global.dialoganswersid[global.currentdialogue, global.currentdialogueline], i])
                        ansheight = string_height(global.dialogueanswers[global.dialoganswersid[global.currentdialogue, global.currentdialogueline], i])
                        test = 0
                        if selectedanswer mod 2 = 0 test = 0.3
                        draw_sprite_ext(sprDialogueAnswerRect, 1, view_xview[0] + view_wview[0] / 2 - (view_wview[0] / 2 - answidth / 2) * (1 - drawanswer[i]), answerrecty, 1, 1, 0,c_white, test)
                        draw_sprite_ext(sprDialogueAnswerRect, 0, view_xview[0] + view_wview[0] / 2 - (view_wview[0] / 2 - answidth / 2) * (1 - drawanswer[i]), answerrecty, 1, 1, 0,global.dialogueanswerscolor[global.dialoganswersid[global.currentdialogue, global.currentdialogueline], i], 1)
                        draw_set_valign(fa_center)
                        draw_set_halign(fa_center)
                        draw_set_color(merge_color(global.dialogueanswerscolor[global.dialoganswersid[global.currentdialogue, global.currentdialogueline], i], c_black, 0.5))
                        draw_text(view_xview[0] + view_wview[0] / 2 - (view_wview[0] / 2 - answidth / 2) * (1 - drawanswer[i]) + 0.45, view_yview[0] + view_hview[0] - 40 + (40/3) * i + 0.45, global.dialogueanswers[global.dialoganswersid[global.currentdialogue, global.currentdialogueline], i])
                        draw_set_color(global.dialogueanswerscolor[global.dialoganswersid[global.currentdialogue, global.currentdialogueline], i])
                        draw_text(view_xview[0] + view_wview[0] / 2 - (view_wview[0] / 2 - answidth / 2) * (1 - drawanswer[i]), view_yview[0] + view_hview[0] - 40 + (40/3) * i, global.dialogueanswers[global.dialoganswersid[global.currentdialogue, global.currentdialogueline], i])
                        draw_set_color(c_white)
                        if selectedanswer &gt; 1 selectedanswer -= 1
                    }
                }
            i += 1
            }
            answerrectneedy = view_yview[0] + view_hview[0] - 40 + (40/3) * currentanswer
            answerrecty += (answerrectneedy - answerrecty) * 0.25
        }
    }
} else {
    if drawdialog = 2 {
        //drawdialogrect -= drawdialogrect * 0.2
        //drawdialogletter = 0
        //if drawdialogrect &lt; 0.02 drawdialog = 1
    } else {
        drawdialogrect = 0
        drawdialogletter = 0
    }
}


if firstfloorsequence = 1 {
    ffsx += 0.75
    draw_sprite_ext(sprLogoFinal, 0, view_xview[0] + view_wview[0] / 2, view_yview[0] + view_hview[0] / 2, 3, 3, 0, c_white, ffsalpha)
    if ffsx &gt; 200 and ffsx &lt; 450 { if ffsalpha &lt; 1 ffsalpha += 0.01 else ffsalpha = 1 }
    if ffsx &gt; 450 { if ffsalpha &gt; 0 ffsalpha -= 0.01 if ffsalpha &lt;= 0 { ffsalpha = 0 firstfloorsequence = 0 fade = 1 with objPlayer active = 1 alarm[6] = 60 }
    draw_set_alpha(1 - ffsalpha)
    draw_set_color(c_black)
    draw_rectangle(view_xview[0] -10, view_yview[0] -10,view_xview[0] + view_wview[0] + 10, view_yview[0] + view_hview[0] + 10, 0)
    draw_set_alpha(1)
    draw_set_color(c_white)
    }
}

if fade &gt;= 0 { if room = rmFirstFloor fade -= 0.005 else fade -= 0.005 } else fade = 0
draw_set_alpha(fade)
draw_set_color(c_black)
draw_rectangle(view_xview[0] -10, view_yview[0] -10,view_xview[0] + view_wview[0] + 10, view_yview[0] + view_hview[0] + 10, 0)
draw_set_alpha(1)
draw_set_color(c_white)

if next = 1 {
    if nextalpha &lt; 1 nextalpha += 0.02 else room_goto(nextlevel)
    draw_set_alpha(nextalpha)
    draw_set_color(c_black)
    draw_rectangle(view_xview[0] -10, view_yview[0] -10,view_xview[0] + view_wview[0] + 10, view_yview[0] + view_hview[0] + 10, 0)
    draw_set_alpha(1)
    draw_set_color(c_white)
}

if global.death = 1 {
    if global.deathscreen &lt; 1 global.deathscreen += 0.01 else {global.death = 2 global.deathscreen = 0}
    draw_set_color(merge_color(c_black, merge_color(c_aqua, c_white, 0.3), global.deathscreen))
    draw_set_blend_mode(bm_subtract)
    draw_rectangle(view_xview[0] - 5, view_yview[0] - 5, view_xview[0] + view_wview[0] + 5, view_yview[0] + view_hview[0] + 5,0)
    draw_set_blend_mode(bm_normal)
    draw_set_color(c_white)
    
    goscale = 1
    if global.fight != 0 or global.dialogue != 0 goscale = 0.75
    
    draw_set_valign(fa_center)
    draw_set_halign(fa_center)
    draw_set_font(fntGameOver)
    draw_text_transformed_colour(view_xview[0] + view_wview[0] / 2, view_yview[0] + view_hview[0] / 2, "GAME OVER", goscale, goscale, 0, c_black, c_black, c_black, c_black, global.deathscreen)
}

if global.death = 2 {
    if global.deathscreen &lt; 1 global.deathscreen += 0.01 else { if room = rmFirstLevel {with objSurfacer { surface_set_target(footsteps) draw_clear_alpha(c_black, 0) surface_reset_target() }} room_goto(rmDeath) }
    draw_set_color(merge_color(c_black, merge_color(c_aqua, c_white, 0.3), 1))
    draw_set_blend_mode(bm_subtract)
    draw_rectangle(view_xview[0] - 5, view_yview[0] - 5, view_xview[0] + view_wview[0] + 5, view_yview[0] + view_hview[0] + 5,0)
    draw_set_blend_mode(bm_normal)
    
    draw_set_color(c_black)
    draw_set_alpha(global.deathscreen)
    draw_rectangle(view_xview[0] - 5, view_yview[0] - 5, view_xview[0] + view_wview[0] + 5, view_yview[0] + view_hview[0] + 5,0)
    draw_set_alpha(1)
    draw_set_color(c_white)
    
    draw_set_valign(fa_center)
    draw_set_halign(fa_center)
    draw_set_font(fntGameOver)
    
    goscale = 1
    if global.fight != 0 or global.dialogue != 0 and room != rmFirstDoctor goscale = 0.75
    
    draw_text_transformed_colour(view_xview[0] + view_wview[0] / 2, view_yview[0] + view_hview[0] / 2, "GAME OVER", goscale, goscale, 0, merge_color(c_black, c_white, global.deathscreen), merge_color(c_black, c_white, global.deathscreen), merge_color(c_black, c_white, global.deathscreen), merge_color(c_black, c_white, global.deathscreen), 1)
}

if instance_exists(objPlayer) {
    if objPlayer.line = 1 {
        audio_sound_gain(music, 0, 5000)
        audio_play_sound(musAmbient,0,0)
        objPlayer.line = 2
    }
    if objPlayer.line = 2
    {
        linedir -= 3
        if linealpha &lt; 0.7 linealpha += 0.0005 else { if linefade &lt; 1 linefade += 0.005 else { audio_stop_all() room_goto(rmFirstDoctor) } }
        draw_sprite_ext(sprWatch, 0, view_xview[0] + view_wview[0] / 2, view_yview[0] + view_hview[0] / 2, 4, 4, 0, c_white, linealpha)
        draw_sprite_ext(sprWatchArrow, 0, view_xview[0] + view_wview[0] / 2, view_yview[0] + view_hview[0] / 2, 4, 4, linedir / 2 , c_black, linealpha)
        draw_sprite_ext(sprWatchArrow, 0, view_xview[0] + view_wview[0] / 2, view_yview[0] + view_hview[0] / 2, 4 * 0.75, 4, linedir / 3, c_black, linealpha)
        draw_sprite_ext(sprWatchArrow, 0, view_xview[0] + view_wview[0] / 2, view_yview[0] + view_hview[0] / 2, 4, 4 * 0.5, linedir, c_white, linealpha)
        draw_set_alpha(linefade)
        draw_set_color(c_black)
        draw_rectangle(view_xview[0] -10, view_yview[0] -10,view_xview[0] + view_wview[0] + 10, view_yview[0] + view_hview[0] + 10, 0)
        draw_set_alpha(1)
        draw_set_color(c_white)
    }
}

if fade2 = 1 {
    if fade2alpha &lt; 1 fade2alpha += 0.005 else { audio_stop_all() room_goto(rmMainMenu) }
    draw_set_alpha(fade2alpha)
    draw_set_color(c_black)
    draw_rectangle(view_xview[0] -10, view_yview[0] -10,view_xview[0] + view_wview[0] + 10, view_yview[0] + view_hview[0] + 10, 0)
    draw_set_alpha(1)
    draw_set_color(c_white)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="89">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.death = 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="85">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>taskstep = 1
nexttask = "Тестовое задание"

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="84">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if room = room1 scrStartFight(432, 227, objFightMannequin) 
if room = rmSecondFloor scrStartFight(313, 208, objFightMannequin)
//scrStartFight(336, 192, objFightMannequin)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(objSurfacer) {
    if surface_exists(objSurfacer.footsteps) {
        surface_set_target(objSurfacer.footsteps)
        draw_clear_alpha(c_black, 0)
        surface_reset_target()
    }
    if surface_exists(objSurfacer.footsteps) surface_free(objSurfacer.footsteps)
}
game_restart()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="69">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if room = room1 {
scrStartDialogue(0,0)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
